class User():
    staff = []
    def __init__(self, ID, name):
        self._ID = ID
        self.name = name
        self.__level = "user"
        User.staff.append(self) #Добавление текущего экземпляра в список,
                                # что позволит отслеживать все экземпляры класса

    def list_of_names(self):
        print(f"Список пользователей (смотрит {self.name}):")
        for i, man in enumerate(User.staff):
            print(f"{i} - {man.name}")

    def get_level(self):
        return self.__level

    def set_level(self):
        self.__level = "read"

    def get_id(self):
        return self._ID

class Admin(User):
    def __init__(self, ID, name):
        super().__init__(ID, name)
        self.__additional_level = "admin"

    def get_l(self):
        return self.__additional_level

    def add_user(self, ID, name):
        user = User(ID, name)
        print(f"Сотрудник {name} добавлен")

    def del_user(self, ID_to_del):
        for man in self.staff:
            ID_of_man = man.get_id()
            if ID_of_man == ID_to_del:
                print(f"Сотрудник {man.name} с {ID_of_man} удален")
                User.staff.remove(man)
                self.list_of_names()
                break

    def chage_level_to_read(self, ID_for_change):
        flag = 0
        for man in self.staff:
            ID_of_man = man.get_id()
            if ID_of_man == ID_for_change:
                flag = 1
                man.set_level()
                print(f"У сотрудника {man.name} с {ID_of_man} уровень доступа теперь - {man.get_level()} ")
                break
        if flag == 0:
            print(f"Неверный ID - {ID_for_change}")

user1 = User("111", "Fill")
user2 = User("112", "Ann")
admin = Admin("000", "Tim")

print(f"{admin.name} - наш админ")
print(f"Его уровень доступа - {admin.get_l()}")
user1.list_of_names()
admin.list_of_names()
admin.add_user("113","Patrik")
admin.add_user("114","Paul")
admin.del_user("111")
admin.chage_level_to_read("112")
admin.chage_level_to_read("119")













